package Dot::Conf;

our $config = {
  # Defines the path that will be used as reference
  # for all relative paths
  'root' => '~',

  # Available dir modes:
  #   id   -- means the folder istself will end up in root
  #   root -- means the content of folder will end up in root
  #   (can be configured per folder in 'dirconf')
  'default_dir_mode' => 'root',

  # Symlink extesion for symlink_rec mode:
  #   If any folder ends in this extension it will stop recursion
  #   and symlink itself into destination
  #   (can be configured per folder in 'dirconf')
  'default_symlink_ext' => 'sym',

  # Available copy modes:
  #   copy        -- will copy the files and dirs
  #   symlink     -- will symlink file or dir directly
  #   symlink_rec -- will symlink files into place recursively
  #   (can be configured per folder in 'dirconf')
  'default_copy_mode' => 'symlink_rec',

  # Dot modes:
  #   top_level -- will prepend only to topmost level in this folder
  #   no_dot    -- will not prepend dots to any files (usefull for bin for ex.)
  #   (can be configured per folder in 'dirconf')
  'default_dot_mode' => 'top_level',

  # Folders listed in here will not be acted upon
  'disabled' => [ '@misc' ],

  # Per directory configurations:
  #   Top level key is the name of the directory.
  #   Available keys are the following:
  #     dir_mode    -- see documentation for default_dir_mode 
  #     copy_mode   -- see documentation for default_copy_mode 
  #     dot_mode    -- see documentation for default_dot_mode
  #     symlink_ext -- see documentation for default_symlink_ext
  #     root        -- overrides dir mode and puts the contents in that place
  'dirconf' => {
    'irssi'       => { 'copy_mode' => 'copy'                         } ,
    'bin'         => { 'dot_mode' => 'no_dot', 'copy_mode' => 'copy' } ,
    'zprezto'     => { 'dir_mode' => 'root', 'copy_mode' => 'copy'   } ,
  },

  # Files listed here will be ignored
  #   The patterns will be matched and globbed
  #   This works roughly like .gitignore
  'ignore' => ['.DS_Store', '*.bak'],

  # Scripts (not implemented yet):
  #   Script that is run before and after the linkup this is usefull
  #   if you want to do something custom like  updating submodules,
  #   patching files or whatever else your imagination is capable of.
  #
  #   If the prelink returns any code other that 0 that signals
  #   my script to stop executing
  'prelink'  => '@misc/pre.sh',
  'postlink' => '@misc/post.sh',

};

# vim: ft=perl
