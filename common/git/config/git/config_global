# vim: ft=gitconfig
[core]
  excludesfile = ~/.config/git/ignore_global
[pager]
  lg = false
[pretty]
  nice = tformat:%C(red)%h%Creset - %s%n\t%C(bold blue)<%an>%Creset%C(yellow)%d%Creset %C(green)(%cr)%Creset
  nice-extra = tformat:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an : %ae>%Creset
  nice = tformat:* %C(red)%h%Creset - %C(bold blue)<%an>%Creset %s%n    %C(green)(%ar)%C(yellow)%d%Creset
  nice-old = tformat:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an : %ae>%Creset
  nice-cols = tformat:%C(red)%h%Creset::%C(bold blue)<%an>%Creset::%s::%C(green)(%ar)%Creset::%C(yellow)%d%Creset
[stgit.alias]
  bb = stg branch
  rff = stg refresh --force
  ls = stg series
  lg = stg series -d
  gn = git stg-gn
  gp = git stg-gp
  rstash = git stg-rstash
[alias]
  # [Stacked Git]
  ################################################################################
  stg-gp = !stg goto $(stg prev)
  stg-gn = !stg goto $(stg next)
  stg-rstash = "!f() { git rstash \"$@\" -- \"HEAD:$(stg top)\"; }; f"


  # [Basics]
  ################################################################################

  f = fetch -n
  b = branch
  bf = !git b --list f/*
  co = checkout
  wt = worktree

  bh = !git reflog -n 10000 | grep 'checkout: moving from' | perl -pe 's/.*moving from (.+) to (.+)/$2 %% <- %% $1/' | column -tx -s "%%"

  # [Logging]
  ################################################################################

  lg = log -n 10 --first-parent --pretty=nice
  lgt = !git lg --pretty=nice-cols --color | column -xt -s "::"
  lgg = lg --graph
  lgu = !git lg -n 100 $(git upstream)..HEAD
  lguu = !git lg -n 100 HEAD..$(git upstream)
  lgf = lg --follow

  # [FastForward]
  ################################################################################

  pullr = pull --rebase
  pullff = pull --ff-only
  mergeff = merge --ff-only

  # [Status]
  ################################################################################

  st = status
  stu = status -uno
  lsa = ls-files --exclude-standard

  stat = show --stat

  # [DiffDisplay]
  ################################################################################

  d = diff
  dc = diff --cached
  diffc = diff --cached

  # [Commits]
  ################################################################################

  c = commit
  cm = commit -m

  ca = commit --amend
  cah = commit --amend -C HEAD
  caha = commit --amend -C HEAD -a

  # [Rebase]
  ################################################################################

  rb = rebase
  rbe = rebase --edit
  rbc = rebase --continue
  rbi = rebase -i
  rbu = !git rebase $(git upstream)

  cp = cherry-pick

  # [Submodules]
  ################################################################################

  su = submodule update
  suc = submodule update --checkout

  # [FileTracking]
  ################################################################################

  untracked = !git ls-files -v | grep "^[[:lower:]]" | perl -pe "s/^\\\\w+\\\\s+//"
  untrack = update-index --assume-unchanged
  track = update-index --no-assume-unchanged

  # [Extended Commands]
  ################################################################################

  sum = show --format=medium --stat

  # root -- Returns the root folder of the Current Git Repo.
  root = rev-parse --show-toplevel

  # root -- Returns the root folder of the Current Git Repo.
  dir = rev-parse --git-dir

  # upstream -- Returns the upstream of the current branch.
  upstream = "!f() { git rev-parse --abbrev-ref ${1:-HEAD}@{upstream}; }; f"

  # run -- Runs a command from the Git Root as Working Directory.
  # Usage: git run <command to run>
  run = "!f() { cd \"`git root`\"; \"$@\"; }; f"

  # iadd -- Interactively select files to add
  iadd = !git status -u --porcelain | fzf -m | cut -c 3- | xargs git run git add --

  # ireset -- Interactively select files to revert
  ireset = !git status -u --porcelain | fzf -m | cut -c 3- | xargs git run git reset --

  # affected -- Displays changes done in either HEAD commit (if no args) or explicitly given one.
  # Usage: git affected [<ref>]
  affected = show --format="" --name-status
  affected-list = show --format="" --name-only

  # arc integration
  check = !mono-check
  upload = !arc diff --base="git:HEAD~1"
  upload-all = !git add -A && git cah && git upload

[commit]
  verbose = true
[diff]
  tool = vimdiff
  algorithm = histogram
[push]
  default = simple
[merge]
  tool = vimdiff
  conflictstyle = diff3
[rerere]
  enabled = true
[difftool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\"
  path =
[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
[mergetool "vscode"]
  cmd = code --wait $MERGED
[tig "color"]
  cursor = green black
  title-focus = green black
  title-blur = white black
