[pretty]
  nice       = tformat:%C(red)%h%Creset - %s%n\t%C(bold blue)<%an>%Creset%C(yellow)%d%Creset %C(green)(%cr)%Creset
  nice-extra = tformat:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an : %ae>%Creset

  nice       = tformat:* %C(red)%h%Creset - %C(bold blue)<%an>%Creset %s%n    %C(green)(%ar / %cr)%C(yellow)%d%Creset
  nice-sep   = tformat:%n* %C(red)%h%Creset - %s%n\t%C(bold blue)<%an>%Creset%C(yellow)%d%Creset %C(green)(%cr)%Creset
  nice-cons  = tformat:* %C(red)%h%Creset - %s | %C(bold blue)<%an>%Creset | %C(green)(%cr)%C(yellow)%d%Creset
  nice-old   = tformat:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an : %ae>%Creset
  nice-cols  = tformat:%C(red)%h%Creset::%C(bold blue)<%an>%Creset::%s::%C(green)(%ar)%Creset::%C(yellow)%d%Creset
  
[pager]
  lg           = false
  lgg          = false
  files     = false
  files-ls  = false
  confilcts    = false
  confilcts-ls = false

[alias]
  # [Basics]
  ################################################################################

  b  = branch
  co = checkout

  # [Logging]
  ################################################################################

  lg   = log -n 10 --first-parent --pretty=nice
  lgr   = lg --reverse
  lgf   = log -n 10 --first-parent --pretty=nice-sep --name-status
  lgg  = log -n 10 --graph --pretty=nice-cons
  lgt  = !git lg --pretty=nice-cols --color | column -xt -s "::"
  lgu  = !git lg -n 100 $(git upstream)..HEAD
  lguu = !git lg -n 100 HEAD..$(git upstream)

  # [FastForward]
  ################################################################################

  pullr   = pull --rebase
  pullff  = pull --ff-only
  mergeff = merge --ff-only

  # [Status]
  ################################################################################

  st  = status -s
  stu = status -su

  ls   = ls-files --exclude-standard
  stat = !git --no-pager show --numstat --shortstat --format=

  # [DiffDisplay]
  ################################################################################

  d     = diff
  dc    = diff --cached
  diffc = diff --cached
  cdiff = diff --cached

  # [Commits]
  ################################################################################

  c  = commit
  cm = commit -m

  ca  = commit --amend --no-edit
  cae = commit --amend

  # [Rebase]
  ################################################################################

  rb  = rebase
  rbe = rebase --edit
  rbc = rebase --continue
  rbi = rebase -i
  rbu = !git rebase $(git upstream)

  cp = cherry-pick

  # [Submodules]
  ################################################################################

  su  = submodule update
  suc = submodule update --checkout

  # [FileTracking]
  ################################################################################

  ls-untracked = !git ls-files -v | grep "^[[:lower:]]" | perl -pe "s/^\\\\w+\\\\s+//"
  untrack      = update-index --assume-unchanged
  track        = update-index --no-assume-unchanged

  # [Extended :: Self Contained]
  ################################################################################

  sum = show --format=medium --stat

  # root -- Returns the root folder of the repo.
  root = rev-parse --show-toplevel

  # dir -- Returns the location of the git dir (worktree's index dir)
  dir-git = rev-parse --git-dir
  
  # dir -- Returns the location of the git dir (database dir)
  dir-db = rev-parse --git-common-dir

  # upstream -- Returns the upstream of the current branch.
  upstream = "!f() { git rev-parse --abbrev-ref ${1:-HEAD}@{upstream}; }; f"

  # run -- Runs a command from the Git Root as Working Directory.
  # Usage: git run <command to run>
  run = "!f() { cd \"`git root`\"; \"$@\"; }; f"

  # iadd -- Interactively select files to add
  iadd = !git status -u --porcelain | fzf -m | cut -c 3- | xargs git run git addu

  # ireset -- Interactively select files to revert
  ireset = !git status -u --porcelain | fzf -m | cut -c 3- | xargs git run git reset --

  # ireset -- Interactively restore files back to original HEAD state
  irestore = !git status -u --porcelain | fzf -m | cut -c 3- | xargs git run git restore --

  # files -- Displays changes done in either HEAD commit (if no args) or explicitly given one.
  # Usage: git affected [<ref>]
  files = show --format="" --name-status
  files-ls = show --format="" --name-only
  conflicts = diff --name-status --diff-filter=U
  conflicts-ls = diff --name-only --diff-filter=U

  # [Extended :: Custom Git Utils]
  ################################################################################

  ctx = !git-utils git-ctx -q "ctx/"
  addu = !git-utils git-checked-add-update
  browse = !git-utils git-browse
  review = !frk
  
  # [Extended :: Phabricator]
  ################################################################################

  # arc integration
  arc-upload = !arc diff "HEAD~1"
  arc-draft  = arc-upload --only

  arc-lint = !arc lint --rev HEAD~1 --trace --apply-patches
  arc-unit = !arc unit --rev HEAD~1 --trace

  # farc integration
  farc-push   = !farc upload HEAD~1..HEAD
  farc-edit   = !git notes --ref refs/notes/farc edit
