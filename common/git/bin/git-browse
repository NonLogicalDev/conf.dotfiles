#!/bin/bash
PROG="$(basename $0)"

_help() {
cat <<EOD
$PROG converts paths to files in repo into web links to repository hosting

Usage:
  $PROG url [FILE_PATH | DIR_PATH]
  $PROG open [FILE_PATH | DIR_PATH]
  
Description:
  This is a quick and dirty util for either generating or openning files in
  remote hosting like Github or Sourcegraph or Phabricator.

Configuration (via "git config"):

  # browse.url-file [local]
  # browse.url-dir [local]

  # browse.service [local]
  # browse.service-default [global]

  # browse.sourcegraph.domain [global]
  # browse.sourcegraph.repo [local]

  # browse.github.domain [global]
  # browse.github.repo [local]
EOD
}

_die() {
  if [[ -n $1 ]]; then
    echo "ERROR: $1" >&2
    echo
  fi
  exit 128
}

__cmd_open() {
  local __url=$(__cmd_url "$@")
  if [[ -n $__url ]]; then
    ( set -x; open $__url; )
  else
    _die "git-browse not configured"
  fi
}

__cmd_url() {
  set -x;

  # browse.url-file [local]
  # browse.url-dir [local]
  #
  # browse.service [local]
  # browse.service-default [global]
  #
  # browse.sourcegraph.domain [global]
  # browse.sourcegraph.repo [local]
  #
  # browse.github.domain [global]
  # browse.github.repo [local]

  local __file_path=""
  if [[ -n $1 ]]; then
    __file_path=$(git ls-files --full-name "$1")
  fi
  local __line=$2

  local __browse_url_file_expr=""
  local __browse_url_dir_expr=""

  local __browse_service=$(git config browse.service)
  local __browse_service_default=$(git config browse.service-default)
  local __origin_url=$(git remote get-url origin)

  local __u_browse_url_file_expr=$(git config browse.url-file)
  local __u_browse_url_dir_expr=$(git config browse.url-dir)

  if [[ -z $__browse_service ]]; then
    if [[ $__origin_url =~ ".*github.com.*" ]]; then
      __browse_service="github"
    else
      __browse_service="$__browse_service_default"
    fi
  fi

  case $__browse_service in
    "sourcegraph")
      local __sg_domain=$(git config browse.sourcegraph.domain) # https://sourcegraph.domain.com
      local __sg_repo=$(git config browse.sourcegraph.repo)     # repo/path

      if [[ -z $__sg_domain ]]; then
        __sg_domain="https://sourcegraph.com"
      fi
      if [[ -z $__sg_repo ]]; then
        __sg_repo=$(echo $__origin_url | perl -pe 's/^(.+@)//,s/:/\//')
      fi

      __browse_url_file_expr='${__sg_domain}/${__sg_repo}/-/blob/${__file_path}#L${__line}'
      __browse_url_dir_expr='${__sg_domain}/${__sg_repo}/-/blob/${__file_path}'
      ;;

    "github")
      local __gh_domain=$(git config browse.github.domain) # https://sourcegraph.domain.com
      local __gh_repo=$(git config browse.github.repo)     # repo/path

      if [[ -z $__sg_domain ]]; then
        __gh_domain="https://github.com"
      fi
      if [[ -z $__sg_repo ]]; then
        __gh_repo=$(echo $__origin_url  | perl -pe 's/^(.+@)(github.com:)?//,s/\.git$//,s/:/\//')
      fi

      __browse_url_file_expr='${__gh_domain}/${__gh_repo}/blob/HEAD/${__file_path}#L${__line}'
      __browse_url_dir_expr='${__gh_domain}/${__gh_repo}/tree/HEAD/${__file_path}'
      ;;
    *)
      if [[ -n $__browse_service ]]; then
        _die "$__browse_service not supported"
      fi
  esac


  if [[ -n $__u_browse_url_file_expr ]]; then
    __browse_url_file_expr=$__u_browse_url_file_expr
  fi

  if [[ -n $__u_browse_url_dir_expr ]]; then
    __browse_url_dir_expr=$__u_browse_dir_file_expr
  fi

  if [[ -z $__browse_url_file_expr ]]; then
    _die "git-browse not configured"
  fi

  if [[ -d "$1" ]]; then
    eval echo ${__browse_url_dir_expr}
  else
    eval echo ${__browse_url_file_expr}
  fi
}

cmd=$1; shift
case $cmd in
  "open")
    __cmd_open "$@"
    ;;
  "url")
    __cmd_url "$@"
    ;;
  "-h"|"--help")
    _help "$@"
    ;;
  *)
    _die "unknown args $@"
    _help "$@"
    ;;
esac

## Archive ##

# Examples:
# git phab
# git phab master
# git phab <name>/feature-branch
# git phab 45bf56

# GIT_REF=$1
# if [ -z "$GIT_REF" ]; then
#   GIT_REF="HEAD"
# fi
#
# GIT_SHA=$(git rev-parse $GIT_REF)
# GIT_BRANCH=$(git rev-parse --abbrev-ref $GIT_REF)
# if [ -n "$GIT_BRANCH" ]; then
#   FEATURE=$(arc feature --output json | jq  ".[]|select(.name==\"$GIT_BRANCH\" and .revision!=.null)|\"D\"+.revision" -r)
# fi
#
# if [ -n "$FEATURE" ]; then
#   arc browse $FEATURE
# elif [ -n "$GIT_BRANCH" ] && (git show-ref $GIT_BRANCH | grep -q "remotes/"); then
#   echo "$GIT_BRANCH"
#   arc browse $GIT_BRANCH
# else
#   arc browse $GIT_SHA
# fi

