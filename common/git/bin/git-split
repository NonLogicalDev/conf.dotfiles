#!/usr/bin/env bash

if ( ! command -v fzf 1>/dev/null 2>/dev/null ) ; then 
  echo "ERROR: No FZF command detected."
  exit 1
fi

GIT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
if [[ $? -ne 0 ]]; then
  echo "ERROR: Not in a Git repository."
  exit 1
fi

if [[ -n "$(git status -s)" ]]; then
  echo "ERROR: Tree is dirty, please commit or stash changes before proceeding."
  exit 1
fi

set -x -e

GIT_SPLIT_HEADS="${GIT_DIR}/.git/git-split.heads"

# Tag current branch.
ORIGINAL_SHA=$(git rev-parse HEAD)

# Generate Split Branch Marker.
GIT_SPLIT_BRANCH=$( 
  git show-ref \
    | grep script/git-split \
    | grep "${ORIGINAL_SHA}" \
    | awk '{print $2}' 
)
if [[ -z ${GIT_SPLIT_BRANCH} ]]; then
  GIT_SPLIT_BRANCH="script/git-split/$(date +"%s")"
  git branch -f "${GIT_SPLIT_BRANCH}" "${ORIGINAL_SHA}"
fi

_finish() {
  # Warn USER:
  ( set +x
    echo "================================================================================"
    echo "ORIGINAL SHA: ${ORIGINAL_SHA} (before splitting)"
    echo "Can be found in ${GIT_SPLIT_HEADS} and at ${GIT_SPLIT_BRANCH} branch"
    echo "${ORIGINAL_SHA}" >> "${GIT_SPLIT_HEADS}"
    echo "================================================================================"
  )
}
trap _finish EXIT

# Go to the root of the git repo (to make sure all modified files can be seen).
cd "${GIT_DIR}"

# Reset to previous commit.
git reset $(git rev-parse "${ORIGINAL_SHA}^1")

# Ask a user to select files to split out.
SELECTED_FILES=$(
  git status --porcelain=1 \
    | cut -c4- | sort \
    | fzf --multi --prompt="Select FILES to split out."
) && true

# If user selected anything add all files except specified.
if [ -n "$SELECTED_FILES" ]; then
  git add .
  git reset -- ${SELECTED_FILES}
  git commit -C "${ORIGINAL_SHA}"
else
  git reset "${ORIGINAL_SHA}"
fi
